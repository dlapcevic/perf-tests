name: network-policy-latency
automanagednamespaces: 0
namespace:
  number: 5
  prefix: test-vwev3c
  deletestalenamespaces: false
  deleteautomanagednamespaces: true
  enableexistingnamespaces: false
steps:
- phases: []
  measurements:
  - method: GenericPrometheusQuery
    params:
      action: start
      metricName: Network Policy Enforcement Latency
      metricVersion: v1
      queries:
      - name: PolicyCreation - TargetCount
        query: sum(policy_enforcement_latency_policy_creation_seconds_count)#[%v:]
      - name: PolicyCreation - Bucket 3s
        query: sum(policy_enforcement_latency_policy_creation_seconds_bucket{le="1"})#[%v:]
      - name: PolicyCreation - Bucket 5s
        query: sum(policy_enforcement_latency_policy_creation_seconds_bucket{le="3"})#[%v:]
      - name: PolicyCreation - Bucket 10s
        query: sum(policy_enforcement_latency_policy_creation_seconds_bucket{le="5"})#[%v:]
      - name: PolicyCreation - Perc99
        query: histogram_quantile(0.99, sum(rate(policy_enforcement_latency_policy_creation_seconds_bucket[%v]))
          by (le))
      - name: PolicyCreation - Perc90
        query: histogram_quantile(0.9, sum(rate(policy_enforcement_latency_policy_creation_seconds_bucket[%v]))
          by (le))
      - name: PolicyCreation - Perc50
        query: histogram_quantile(0.5, sum(rate(policy_enforcement_latency_policy_creation_seconds_bucket[%v]))
          by (le))
      - name: PodCreation - TargetCount
        query: sum(policy_enforcement_latency_pod_creation_seconds_count)#[%v:]
      - name: PodCreation - Bucket 0.1s
        query: sum(policy_enforcement_latency_pod_creation_seconds_bucket{le="0.1"})#[%v:]
      - name: PodCreation - Bucket 0.5s
        query: sum(policy_enforcement_latency_pod_creation_seconds_bucket{le="0.5"})#[%v:]
      - name: PodCreation - Bucket 1s
        query: sum(policy_enforcement_latency_pod_creation_seconds_bucket{le="1"})#[%v:]
      - name: PodCreation - Bucket 3s
        query: sum(policy_enforcement_latency_pod_creation_seconds_bucket{le="3"})#[%v:]
      - name: PodCreation - Bucket 5s
        query: sum(policy_enforcement_latency_pod_creation_seconds_bucket{le="5"})#[%v:]
      - name: PodCreation - Bucket 10s
        query: sum(policy_enforcement_latency_pod_creation_seconds_bucket{le="10"})#[%v:]
      - name: PodCreation - Bucket 60s
        query: sum(policy_enforcement_latency_pod_creation_seconds_bucket{le="60"})
      - name: PodCreation - Bucket 600s
        query: sum(policy_enforcement_latency_pod_creation_seconds_bucket{le="600"})
      - name: PodCreation - Perc99
        query: histogram_quantile(0.99, sum(rate(policy_enforcement_latency_pod_creation_seconds_bucket[%v]))
          by (le))
      - name: PodCreation - Perc90
        query: histogram_quantile(0.9, sum(rate(policy_enforcement_latency_pod_creation_seconds_bucket[%v]))
          by (le))
      - name: PodCreation - Perc50
        query: histogram_quantile(0.5, sum(rate(policy_enforcement_latency_pod_creation_seconds_bucket[%v]))
          by (le))
      - name: PodIpAssignedLatency - TargetCount
        query: sum(pod_ip_address_assigned_latency_seconds_count)#[%v:]
      - name: PodIpAssignedLatency - Bucket 1s
        query: sum(pod_ip_address_assigned_latency_seconds_bucket{le="1"})#[%v:]
      - name: PodIpAssignedLatency - Bucket 3s
        query: sum(pod_ip_address_assigned_latency_seconds_bucket{le="3"})#[%v:]
      - name: PodIpAssignedLatency - Bucket 5s
        query: sum(pod_ip_address_assigned_latency_seconds_bucket{le="5"})#[%v:]
      - name: PodIpAssignedLatency - Bucket 10s
        query: sum(pod_ip_address_assigned_latency_seconds_bucket{le="10"})#[%v:]
      - name: PodIpAssignedLatency - Bucket 30s
        query: sum(pod_ip_address_assigned_latency_seconds_bucket{le="30"})#[%v:]
      - name: PodIpAssignedLatency - Bucket 60s
        query: sum(pod_ip_address_assigned_latency_seconds_bucket{le="60"})#[%v:]
      - name: PodIpAssignedLatency - Bucket 600s
        query: sum(pod_ip_address_assigned_latency_seconds_bucket{le="600"})#[%v:]
      - name: PodIpAssignedLatency - Perc50
        query: histogram_quantile(0.50, sum(rate(pod_ip_address_assigned_latency_seconds_bucket[%v]))
          by (le))
      - name: PodIpAssignedLatency - Perc90
        query: histogram_quantile(0.90, sum(rate(pod_ip_address_assigned_latency_seconds_bucket[%v]))
          by (le))
      - name: PodIpAssignedLatency - Perc99
        query: histogram_quantile(0.99, sum(rate(pod_ip_address_assigned_latency_seconds_bucket[%v]))
          by (le))
      - name: ServiceTargetCount
        query: sum(target_service_count)
      - name: ServiceTargetReachedCount
        query: sum(target_service_reached_count)
      unit: s
    identifier: GetNetPolicyLatencyMetrics
    instances: []
  module:
    path: ""
    params: {}
  name: Start Prometheus generic metrics measurements
- phases: []
  measurements:
  - method: Sleep
    params:
      duration: 2m
    identifier: Wait
    instances: []
  module:
    path: ""
    params: {}
  name: Wait 2 minute to initialize prometheus query measurements
- phases:
  - namespacerange:
      min: 1
      max: 5
      basename: null
    replicaspernamespace: 5
    tuningset: defaultQPS
    objectbundle:
    - basename: np-svc
      objecttemplatepath: service.yaml
      templatefillmap:
        TargetLabelKey: group
        TargetLabelValue: net-policy-latency
        TargetPort: 80
        TestLabelValue: connectivity-test
      listunknownobjectoptions: null
  measurements: []
  module:
    path: ""
    params: {}
  name: Creating Services
- phases: []
  measurements:
  - method: WaitForControlledPodsRunning
    params:
      action: start
      labelSelector: test = connectivity-test
      operationTimeout: 3m
    identifier: ""
    instances:
    - identifier: WaitForTestClientPods
      params:
        apiVersion: apps/v1
        kind: Deployment
  module:
    path: ""
    params: {}
  name: Wait for test client pods (pod creation) - start measurement
- phases: []
  measurements:
  - method: NetworkPolicyEnforcement
    params:
      action: setup
      baseline: false
      targetLabelKey: group
      targetLabelValue: net-policy-latency
    identifier: NetworkPolicyEnforcement
    instances: []
  module:
    path: ""
    params: {}
  name: Setup network policy enforcement latency measurement
- phases: []
  measurements:
  - method: NetworkPolicyEnforcement
    params:
      action: create
      expectedTargets: 1000
      measureCilium: false
      podCreation: true
      targetPort: 80
    identifier: NetworkPolicyEnforcement
    instances: []
  module:
    path: ""
    params: {}
  name: Start pod creation network policy enforcement latency measurement
- phases: []
  measurements:
  - method: WaitForControlledPodsRunning
    params:
      action: gather
    identifier: ""
    instances:
    - identifier: WaitForTestClientPods
      params: {}
  module:
    path: ""
    params: {}
  name: Wait for test client pods (pod creation) - gather measuerement
- phases: []
  measurements:
  - method: WaitForControlledPodsRunning
    params:
      action: start
      labelSelector: group = net-policy-latency
      operationTimeout: 15m
    identifier: ""
    instances:
    - identifier: WaitForRunningDeployments
      params:
        apiVersion: apps/v1
        kind: Deployment
  module:
    path: ""
    params: {}
  name: Wait for target pods - start measurement
- phases:
  - namespacerange:
      min: 1
      max: 5
      basename: null
    replicaspernamespace: 5
    tuningset: defaultQPS
    objectbundle:
    - basename: np-dep
      objecttemplatepath: dep.yaml
      templatefillmap:
        NumReplicas: 1
        TargetLabelKey: group
        TargetLabelValue: net-policy-latency
        TargetPort: 80
        TestLabelValue: connectivity-test
      listunknownobjectoptions: null
  measurements: []
  module:
    path: ""
    params: {}
  name: Creating deployments
- phases: []
  measurements:
  - method: WaitForControlledPodsRunning
    params:
      action: gather
    identifier: ""
    instances:
    - identifier: WaitForRunningDeployments
      params: {}
  module:
    path: ""
    params: {}
  name: Wait for target pods - gather measuerement
- phases: []
  measurements:
  - method: Sleep
    params:
      duration: 1m
    identifier: Wait
    instances: []
  module:
    path: ""
    params: {}
  name: Wait 1 minutes for pods to be reached (Pod creation)
- phases: []
  measurements:
  - method: NetworkPolicyEnforcement
    params:
      action: create
      expectedTargets: 1000
      podCreation: false
      targetPort: 80
    identifier: NetworkPolicyEnforcement
    instances: []
  module:
    path: ""
    params: {}
  name: Start pod creation network policy enforcement latency measurement
- phases: []
  measurements:
  - method: Sleep
    params:
      duration: 1m
    identifier: Wait
    instances: []
  module:
    path: ""
    params: {}
  name: Wait 1 minutes for pods to be reached (Policy creation)
- phases:
  - namespacerange:
      min: 1
      max: 5
      basename: null
    replicaspernamespace: 0
    tuningset: deleteQPS
    objectbundle:
    - basename: np-dep
      objecttemplatepath: dep.yaml
      templatefillmap: {}
      listunknownobjectoptions: null
  measurements: []
  module:
    path: ""
    params: {}
  name: Clean up target deployments
- phases: []
  measurements:
  - method: WaitForControlledPodsRunning
    params:
      action: gather
    identifier: ""
    instances:
    - identifier: WaitForRunningDeployments
      params: {}
  module:
    path: ""
    params: {}
  name: Waiting for resource clean up to be completed for pods
- phases: []
  measurements:
  - method: NetworkPolicyEnforcement
    params:
      action: gather
    identifier: NetworkPolicyEnforcement
    instances: []
  module:
    path: ""
    params: {}
  name: Setup network policy enforcement latency measurement
- phases: []
  measurements:
  - method: GenericPrometheusQuery
    params:
      action: gather
      enableViolations: true
    identifier: GetNetPolicyLatencyMetrics
    instances: []
  module:
    path: ""
    params: {}
  name: Gather measurements
tuningsets:
- name: defaultQPS
  initialdelay: 0
  qpsload:
    qps: 100
  randomizedload: null
  steppedload: null
  timelimitedload: null
  randomizedtimelimitedload: null
  parallelismlimitedload: null
  globalqpsload: null
- name: deleteQPS
  initialdelay: 0
  qpsload:
    qps: 30
  randomizedload: null
  steppedload: null
  timelimitedload: null
  randomizedtimelimitedload: null
  parallelismlimitedload: null
  globalqpsload: null
chaosmonkey:
  nodefailure: null
  excludednodes: {}
